import unittest
from io import StringIO
from unittest.mock import patch

from vtool3.gaussian import *


class GaussianTest(unittest.TestCase):
    def test_gjf(self):
        atom = Atom('H', 0, 0, 0)
        gjf = GJF()
        gjf.add_atom(atom)
        out = '''# opt freq hf/3-21g

This line is comment

0 1
H           0.00000000       0.00000000       0.00000000

'''
        with patch('sys.stdout', new=StringIO()) as fake_out:
            gjf.write_gjf()
            self.assertEqual(out, fake_out.getvalue())

    def test_gjf_read_file(self):
        gjf_content = '''# opt freq hf/3-21g

This line is comment

0 1
H           0.00000000       0.00000000       0.00000000

'''
        gjf_file = 'tmp.gjf'
        with open(gjf_file, 'w') as f:
            f.write(gjf_content)

        gjf = GJF()
        gjf.read_gjf(gjf_file)

        g1 = GJF()
        g1.set_lattice([1, 2, 3], 10)
        self.assertEquals([1, 2, 3], g1.lattice.vectors)
        self.assertEquals(10, g1.lattice.constant)

    def test_gjf_all_setter(self):
        g1 = GJF()
        g1.set_option('# opt freq b3lyp')
        self.assertEquals('# opt freq b3lyp', g1.option)

        g1.set_comment('check comment')
        self.assertEquals('check comment', g1.comment)

        g1.set_charge(1)
        self.assertEquals(1, g1.charge)

        g1.set_spin(0)
        self.assertEquals(0, g1.spin)

        h1 = Atom('H', 10, 20, 30, 'T', 'F', 'T', 100, 200, 300)
        h2 = Atom('H', 1, 2, 3, 'F', 'F', 'F', 10, 20, 30)
        f = Atom('F', 100, 200, 300, 'F', 'T', 'F', 1000, 2000, 3000)
        g1.add_atom(h1)
        g1.add_atom(h2)
        g1.add_atom(f)
        self.assertEquals("[('H', 10, 20, 30), ('H', 1, 2, 3), ('F', 100, 200, 300)]", str(g1.get_atoms()))

        g1.sort_atoms()
        self.assertEquals("[('F', 100, 200, 300), ('H', 1, 2, 3), ('H', 10, 20, 30)]", str(g1.get_atoms()))

        tvx = Atom('Tv', 30, 0, 0)
        tvy = Atom('Tv', 0, 60, 0)
        tvz = Atom('Tv', 0, 0, 90)
        g1.add_atom(tvx)
        g1.add_atom(tvy)
        g1.add_atom(tvz)
        g1._check_lattice()
        self.assertEquals("[('F', 100, 200, 300), ('H', 1, 2, 3), ('H', 10, 20, 30)]", str(g1.get_atoms()))
        self.assertEquals('30.000000, 0.000000, 0.000000', str(g1.lattice.vectors[0]))
        self.assertEquals('0.000000, 60.000000, 0.000000', str(g1.lattice.vectors[1]))
        self.assertEquals('0.000000, 0.000000, 90.000000', str(g1.lattice.vectors[2]))

        g2 = GJF()
        g2.read_gjf('src/unittest/file/L1-cu.gjf')
        expect_out = '''%chk=E:\mcm-41\gjf\L1-cu.chk
%nprocshared=8
%mem=1024MB
# opt pbepbe/6-31g/auto

[No Title]

0 1
C          11.45600916      15.05590467       9.53957247
C           5.54393516       8.85426367       9.68752147
C          12.69499816      10.25685467       9.87849947
C           8.44245316      14.35172967       9.94838647
C           4.24858316       9.63741367       9.96426547
C           7.98266516       8.85458267      10.04909747
C           7.07216816      15.03132167      10.11699847
C          10.49426616       9.14930467      10.12708247
C          13.69974616      11.16204467      10.59303947
C          10.78347116      14.43090567      10.76795747
C           9.16233016       9.37847367      10.86822747
C           3.75166116       9.61673967      11.43022447
C          16.60943316      11.22472967      11.66067447
C           5.48127816      14.01509867      11.81437747
C           5.80337816      12.51063867      11.90120647
C           6.41373216       8.57118967      11.97164647
C          12.10027316       9.24258367      12.01590547
C           8.89434316      14.65280167      12.32969347
C          15.31251316      11.22179967      12.47702147
C           7.52755416      15.34381567      12.49941447
C           4.59486116      11.74509367      12.50332047
C          13.10347316      10.15795667      12.71990347
C           5.74715616       9.55506267      12.95589647
Cu         10.75232649      11.26268450      11.07850091
Cu          7.60219498      13.03320908      11.18273081
Cu          6.72843803      10.64876354      11.80268361
H          10.98934616      14.73097367       8.60359547
H           5.88896616       9.10154467       8.67721847
H           8.83116816      14.57568767       8.94914647
H          12.27409916      10.78356567       9.01579147
H           8.01704816       9.33507867       9.06529947
H          10.39527716       9.54948367       9.11163247
H           3.46275616       9.22213367       9.31506147
H           6.35248016      14.57032667       9.43655247
H          12.51448016      14.77056567       9.49830047
H          13.22196916       9.35669267       9.51213847
H          11.38834016      16.14735467       9.59221947
H           4.40652916      10.68249267       9.68129147
H           5.33706416       7.76525467       9.70075447
H           7.18289416      16.09493567       9.84867947
H           8.12667016       7.76561267       9.89412947
H          14.53502316      11.36452067       9.91718147
H           8.31999716      13.25909567      10.04248447
H          10.70951216       8.06840567      10.04282547
H          10.85304316      13.32224067      10.70515847
H          16.51913516      11.80926467      10.73864947
H          13.21146516      12.12898867      10.82958647
H           4.69267616      14.12558967      11.05648947
H          16.88802716      10.20064267      11.39199947
H           2.76601216      10.10047667      11.46374447
H          11.34328116      14.72638467      11.66464947
H           3.59103816       8.58029767      11.76415347
H          12.59179516       8.28176267      11.77484747
H           9.20238116       8.85740567      11.83775247
H           5.79121116       7.66638467      11.86699147
H           3.68478316      12.09033667      11.99636747
H          17.42264316      11.66619667      12.24803347
H           7.35927116       8.24036667      12.41322047
H           7.69696916      16.43026367      12.42491547
H           6.68654016      12.36867067      12.54293647
H           8.79901116      13.57089767      12.55717747
H          11.26214016       9.03653667      12.68898447
H          15.02506116      12.26355467      12.72882747
H           5.04959516      14.33117267      12.77607147
H           9.61554116      15.08289767      13.03672547
H          12.57119216      11.05967967      13.08462547
H           6.50298016      10.27840167      13.27971147
H          15.49468716      10.70827367      13.42885147
H           7.12009416      15.13430667      13.49524647
H           4.50017416      12.04619967      13.56210247
H          13.51827616       9.63867967      13.59077447
H           5.45509116       8.97356067      13.85178047
N           6.65648316       9.16096967      10.63064947
N          11.58641916       9.89104767      10.78820847
N           9.39556916      14.87771367      10.95849747
N           6.55820916      14.93679367      11.48535947
N          14.20821316      10.50513367      11.80997147
N           4.62482716      10.28893867      12.38933547
O           6.10473516      12.05056567      10.56277247
O           8.98878516      10.79680467      11.09765847
Tv         22.00000000       0.00000000       0.00000000
Tv          0.00000000      22.00000000       0.00000000
Tv          0.00000000       0.00000000      22.00000000

'''

        with patch('sys.stdout', new=StringIO()) as fake_out:
            g2.write_gjf()
            self.assertEqual(expect_out, fake_out.getvalue())

